import tkinter as tk
from tkinter import messagebox
import sqlite3
from datetime import datetime

# Set up database
conn = sqlite3.connect("budget.db")
cursor = conn.cursor()
cursor.execute("""CREATE TABLE IF NOT EXISTS expenses (
                  id INTEGER PRIMARY KEY AUTOINCREMENT,
                  description TEXT NOT NULL,
                  amount REAL NOT NULL,
                  date TEXT NOT NULL)""")
conn.commit()

# Function to add an expense
def add_expense():
    description = desc_entry.get()
    amount = amount_entry.get()
    date = date_entry.get()

    if description and amount and date:
        try:
            amount = float(amount)
            cursor.execute("INSERT INTO expenses (description, amount, date) VALUES (?, ?, ?)",
                           (description, amount, date))
            conn.commit()
            desc_entry.delete(0, tk.END)
            amount_entry.delete(0, tk.END)
            date_entry.delete(0, tk.END)
            load_expenses()
        except ValueError:
            messagebox.showwarning("Input Error", "Please enter a valid amount.")
    else:
        messagebox.showwarning("Input Error", "All fields are required.")

# Function to load expenses into the listbox
def load_expenses():
    expense_listbox.delete(0, tk.END)
    cursor.execute("SELECT * FROM expenses")
    expenses = cursor.fetchall()
    for expense in expenses:
        expense_listbox.insert(tk.END, f"{expense[1]} - ${expense[2]:.2f} on {expense[3]}")

# Function to delete an expense
def delete_expense():
    selected_expense = expense_listbox.curselection()
    if selected_expense:
        expense_id = selected_expense[0] + 1
        cursor.execute("DELETE FROM expenses WHERE id=?", (expense_id,))
        conn.commit()
        load_expenses()
    else:
        messagebox.showwarning("Selection Error", "Please select an expense to delete.")

# Function to calculate total expenses for the current month
def calculate_monthly_total():
    current_month = datetime.now().strftime("%Y-%m")
    cursor.execute("SELECT SUM(amount) FROM expenses WHERE date LIKE ?", (f"{current_month}%",))
    total = cursor.fetchone()[0]
    total_label.config(text=f"Total for {current_month}: ${total:.2f}" if total else "No expenses for this month.")

# GUI setup
root = tk.Tk()
root.title("Personal Budget Tracker")

# Entry fields
desc_label = tk.Label(root, text="Description:")
desc_label.pack(pady=5)
desc_entry = tk.Entry(root, width=40)
desc_entry.pack(pady=5)

amount_label = tk.Label(root, text="Amount:")
amount_label.pack(pady=5)
amount_entry = tk.Entry(root, width=20)
amount_entry.pack(pady=5)

date_label = tk.Label(root, text="Date (YYYY-MM-DD):")
date_label.pack(pady=5)
date_entry = tk.Entry(root, width=20)
date_entry.pack(pady=5)

# Buttons
add_button = tk.Button(root, text="Add Expense", command=add_expense)
add_button.pack(pady=5)

delete_button = tk.Button(root, text="Delete Selected Expense", command=delete_expense)
delete_button.pack(pady=5)

total_button = tk.Button(root, text="Calculate Monthly Total", command=calculate_monthly_total)
total_button.pack(pady=5)

# Listbox to display expenses
expense_listbox = tk.Listbox(root, width=50, height=15)
expense_listbox.pack(pady=10)

# Label for displaying the monthly total
total_label = tk.Label(root, text="Total for this month: $0.00")
total_label.pack(pady=10)

# Load expenses on start
load_expenses()

root.mainloop()

# Close database connection
conn.close()
